import Head from 'next/head'
import { ReactNode, useState, useEffect, useCallback, useMemo } from 'react'
import styles from '../styles/Home.module.css'

export default function Home() {
  const [board, setBoard] = useState(new Array(9).fill(0));
  const [player,setplayer] = useState(1)

  const Xwin = useMemo(() => checkwinner(board, 1), [board]);
  const Owin = useMemo(() => checkwinner(board, -1), [board]);
  const draw = useMemo(() => (board.includes(0)==false&&Owin==false&&Xwin==false), [board]);

  const move = useCallback((index: number) => {
    if(Xwin||Owin){return}
    const newboard = [...board]
      if(newboard[index] != 0){return}
      newboard[index] = player

    console.log("move", index)
    setBoard(newboard)

    const nextplayer = player * -1
    setplayer(nextplayer)
  }, [board, player, Xwin, Owin]);

  const empty = useMemo(() => board.some((value: number) => value !== 0), [board]);

  const play = useCallback((index: number) => {
    if (player == -1) {
      move(index);
    }
  }, [board, player, move, empty]);


  useEffect(() => {
    let timeout: any;
    if (player === 1) {
      timeout = setTimeout(() => {
        move(minimax(board, 4, 1, true));
      }, 150);
    }

    return () => {
      timeout && clearTimeout(timeout);
    }
  }, [player, move, board]);

  return (
    <div className={styles.container}>
      <Head>
        <title>TicTacToe</title>
        <meta name="TicTacToeGame" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h1 className={styles.header}>TicTacToe</h1>
    <div className={styles.boardbox}>{board.map((item,index) => (
    <Grid key={index} onClick={() => play(index)} >
      {item === 1 ? "X":null}
      {item === -1 ? "O":null}
    </Grid>))
    }</div>


    {empty&&<p className={styles.p}>Click anywhere on the board to begin!</p>}

    {Xwin&&<h2>Fuck Yeah X!</h2>}
    {Owin&&<h2>Fuck Yeah O!</h2>}
    {draw&&<h2>Draw!</h2>}
    {Xwin&&<button onClick={()=>setBoard(new Array(9).fill(0))}>Play Again?</button>}
    {Owin&&<button onClick={()=>setBoard(new Array(9).fill(0))}>Play Again?</button>}
    {draw&&<button onClick={()=>setBoard(new Array(9).fill(0))}>Play Again?</button>}
      </div>

      )

    }

 
function Grid(props: { children?: ReactNode, onClick?: () => void }) {
  return <div className={styles.board} onClick={props.onClick}>{props.children}</div>
}

function checkwinner(board: number[], player: number): boolean {
  const row1 = [0, 1, 2];
  const row2 = [3, 4, 5];
  const row3 = [6, 7, 8];

  const col1 = [0, 3, 6];
  const col2 = [1, 4, 7];
  const col3 = [2, 5, 8];

  const diag1 = [0, 4, 8];
  const diag2 = [2, 4, 6];

  const combos = [row1, row2, row3, col1, col2, col3, diag1, diag2];

  const iswin = (combo: number[]): boolean => {
    return board[combo[0]] + board[combo[1]] + board[combo[2]] === 3 * player
  }

  const winner = combos.some(iswin)
  return winner
}

//self defined max & min
function max(a: number, b: number) {
  if (a > b) { return a }
  else { return b }
}

function min(a: number, b: number) {
  if (a < b) { return a }
  else { return b }
}

function minimax(board: number[], depth: number, player: number, toplayer: boolean): number {
  let move: number = 0;
  let hypoboard = [...board]
  console.log("board", board)
  console.log("player", player)
  console.log("depth", depth)
  if (checkwinner(board, player * -1)) {
    console.log("Win", player * -1)
    return player * -1
  }
  else if (depth < 0 && checkwinner(board, player * -1) == false) { return 0 }

  if (player == 1) {
    console.log("player 1")
    let maxGain = -Infinity
    console.log(maxGain)
    for (let i = 0; i <= 8; i++) {
      if (board[i] == 0) {
        hypoboard[i] = player
        let gain = minimax(hypoboard, depth - 1, -1, false)
        hypoboard[i] = 0
        if (gain >= maxGain) {
          move = i
        }
        maxGain = max(maxGain, gain)
      }
    }
    console.log("maxgain", maxGain)
    console.log("move", move)
    if (toplayer == true) { return move }
    return (maxGain * 10) + depth

  }

  if (player == -1) {
    console.log("player -1")
    let minGain = Infinity
    console.log(minGain)
    for (let i = 0; i <= 8; i++) {
      if (board[i] == 0) {
        hypoboard[i] = player
        let gain = minimax(hypoboard, depth - 1, 1, false)
        hypoboard[i] = 0
        if (gain <= minGain) { move = i }
        minGain = min(minGain, gain)
      }
    }
    console.log("mingain", minGain)
    if (toplayer == true) { return move }
    return (minGain * 10) - depth
  }

  return move;
}
